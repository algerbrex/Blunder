package engine

const (
	QUEEN_PHASE_SCORE  uint8 = 6
	ROOK_PHASE_SCORE   uint8 = 4
	BISHOP_PHASE_SCORE uint8 = 2
	KNIGHT_PHASE_SCORE uint8 = 2
	PAWN_PHASE_SCORE   uint8 = 0
	TOTAL_PHASE        uint8 = 2*QUEEN_PHASE_SCORE +
							   4*ROOK_PHASE_SCORE +
							   4*BISHOP_PHASE_SCORE +
							   4*KNIGHT_PHASE_SCORE +
							   16*PAWN_PHASE_SCORE
)

var PhaseScores = [6]uint8{
	PAWN_PHASE_SCORE,
	KNIGHT_PHASE_SCORE,
	BISHOP_PHASE_SCORE,
	ROOK_PHASE_SCORE,
	QUEEN_PHASE_SCORE,
}

var MG_PIECE_VALUES = [6]int16{51, 206, 225, 322, 798}
var EG_PIECE_VALUES = [6]int16{139, 269, 290, 473, 813}

var MG_PSQT = [6][64]int16{
    {
          0,   0,   0,   0,   0,   0,   0,   0,
         44,  37,  53,  50,  41,  20,  13,  16,
          3,  -4,  15,  42,  33,  15,  22,  24,
        -25, -18, -20,  -6,   5,   5,   8, -11,
        -36, -21, -20, -13, -11, -12,  -2, -18,
        -42, -21, -27, -28, -21, -12,   2, -16,
        -40, -25, -29, -33, -29, -10,  -2, -23,
          0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
        -21,  -1,   1,  -2,   1,  -9,  -1,  -4,
         -7,  -5,  10,  10,  12,  24,  -6,  -5,
         -6,  18,  38,  48,  58,  24,  25,  -1,
          6,  -1,  14,  30,   7,  33,   4,  20,
        -20,  16,   2,  -8,   3,  -1,  16,  -9,
        -27, -10, -10,   0,   4,  -7,   4, -13,
        -32, -28, -12, -15, -14,  -7, -37, -14,
        -18, -31, -38, -32, -17, -23, -29, -23,
    },
    {
         -9,  -1,   2,  -2,   0,  -3,  -1,   1,
        -12,  -5,  14,   8,  -2,  -3,  -7,  -7,
         -6,  27,  10,  30,  31,  38,  17,  26,
         -7,  -6,   6,  27,   8,  32,  -2, -10,
         -2,   1,  -7,  11,   4,  -2, -12,  -3,
        -13,  -5,   0,  -3,  -5,  -8,  -3,   2,
         -9, -10,   0, -17, -16,  -6,  -1, -17,
        -29,  -4, -22, -35, -25, -26, -16, -22,
    },
    {
          7,  13,  18,  20,  17,   8,   4,  11,
          6,   0,  21,  29,  14,  17,   9,  19,
          5,  19,  15,  26,  40,  17,  25,   1,
        -19,   7, -18,  23,  -2,   2,   0,   8,
        -30, -23, -15, -13, -22, -24, -14, -31,
        -37, -20, -42, -29, -23, -23, -24, -31,
        -55, -27, -24, -29, -26, -35, -21, -32,
        -42, -30, -32, -23, -24, -36, -25, -32,
    },
    {
        -10,   1,  -3,   5,   7,   6,   5,  -1,
         -6, -14,   0,   9,   8,  19,  -8,  16,
         -4,   9,  -2,  18,  26,  33,  30,  26,
         -7,  -5,  -5,  -4,   6,   9,   9,  18,
        -12, -10,  -7, -11, -11,  -1,   4,   0,
         -5,  -7,  -2, -14,  -5,  -8,   0,  -8,
        -28, -11,  -1,  -6,  -4,  -8, -11,  -1,
        -12, -21, -19, -10,  -9, -27, -22, -11,
    },
    {
          0,   0,   0,   0,   0,   1,   0,   0,
          0,   4,   2,   2,   2,   2,   3,   0,
          1,   6,   5,   5,   3,   5,   7,   0,
         -2,   5,   4,   5,   2,   5,   0,  -1,
         -4,  -1,   7,   2,   3,   3,  -3, -10,
         -3,  -9,   1,   0, -13, -26,  -8, -22,
          2,   1, -12, -20, -33,  -9,  19,  16,
        -10,  27,   9, -45,   7, -34,  33,  37,
    },
}

var EG_PSQT = [6][64]int16{
    {
          0,   0,   0,   0,   0,   0,   0,   0,
         94,  81,  76,  43,  66,  53,  52,  86,
         42,  45,  39,  10,  11,  16,  36,  30,
          2,  -4, -12, -27, -31, -34, -15,  -6,
        -16, -16, -36, -38, -37, -32, -24, -29,
        -22, -24, -40, -28, -29, -34, -26, -34,
        -18, -15, -23, -30, -15, -22, -23, -32,
          0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
        -15,   0,   1,  -5,   1,  -7,  -5,  -4,
        -18,  -6,   2,  14,  11,  -5,  -8,  -7,
         -4,   8,  23,  25,  16,  14,  15,  -4,
        -10,  23,  26,  32,  29,  25,  16,   1,
         -3,   1,  30,  32,  29,  32,  16, -12,
        -24, -14,   3,  18,  14,   0, -13, -22,
        -24, -10, -17, -12,  -7, -11, -11, -23,
         -9, -41, -21, -16, -25, -30, -34, -13,
    },
    {
         -3,   0,   9,  10,  10,  -7,  -2,   1,
        -19,   8,   1,   5,   7,  -5,   6,  -9,
          0,  15,   5,   6,  14,  27,  14,   7,
         -1,  12,  10,   9,  21,  11,  24,  -4,
         -3,   7,  24,  12,  12,  16,  -5,  -8,
        -13,   2,   2,   8,  16,  -2, -18, -10,
         -4, -19,  -9,  -2,  -1, -16,  -9, -24,
        -26, -12, -31, -17, -18, -13, -15, -17,
    },
    {
         13,  17,  25,  17,  22,  14,  11,  10,
         10,  22,  23,  25,  20,  16,  10,   4,
          3,  13,  16,   8,  17,   8,   4,   6,
          4,   5,  14,   3,  10,   0,  13,   3,
         -2,   0,  -3,   3,  -5,  -5, -17, -13,
        -21, -15,   0,  -9, -13, -24, -15, -23,
        -14, -25, -10, -10, -26, -23, -25, -28,
        -13, -13,   4,   1, -13,  -9, -21, -33,
    },
    {
         -4,   4,   0,   3,   5,   5,   3,   3,
         -4,  -3,   6,  12,  11,  13,   3,   8,
         -8,  -1,   2,  10,  14,  19,  15,  15,
         -8,  -4,   4,  16,  25,  16,   9,   6,
         -1,   0,   0,  28,  12,  13,   9,  -4,
        -12, -20,  -7,   0,  -5,  -3, -13,  -1,
         -9, -13, -31, -18, -25, -22, -15,  -3,
        -12, -12, -27, -29, -32, -25, -13,  -3,
    },
    {
         -4,   2,   0,  -2,   1,   4,   1,   1,
          0,  18,  11,   7,  15,  12,  20,   0,
         10,  23,  17,  26,  20,  37,  35,  -1,
         -9,  19,  16,  20,  27,  21,  19,   4,
        -12,   0,  12,  18,  18,  19,   5, -19,
         -4,   0,   6,   5,   9,   1,  -4, -16,
        -23,  -5,  -2,  -5,   0, -10, -18, -34,
        -23, -35, -23, -20, -53, -20, -39, -73,
    },
}

var FlipSq = [2][64]uint8{
	{
		0,  1,  2,  3,  4,  5,  6,  7,
		8,  9,  10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8,  9,  10, 11, 12, 13, 14, 15,
		0,  1,  2,  3,  4,  5,  6,  7,
	},
}

func Evaluate(pos *Position) int16 {
	mgScore := pos.MGScores[pos.SideToMove] - pos.MGScores[pos.SideToMove^1]
	egScore := pos.EGScores[pos.SideToMove] - pos.EGScores[pos.SideToMove^1]

	mgTerm := int32(pos.Phase) * int32(mgScore)
	egTerm := int32(egScore) * int32(TOTAL_PHASE-pos.Phase)
	return int16((mgTerm + egTerm) / int32(TOTAL_PHASE))
}
