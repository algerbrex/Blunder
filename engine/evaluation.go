package engine

const (
	QUEEN_PHASE_SCORE  uint8 = 6
	ROOK_PHASE_SCORE   uint8 = 4
	BISHOP_PHASE_SCORE uint8 = 2
	KNIGHT_PHASE_SCORE uint8 = 2
	PAWN_PHASE_SCORE   uint8 = 0
	TOTAL_PHASE        uint8 = 2*QUEEN_PHASE_SCORE +
							   4*ROOK_PHASE_SCORE +
							   4*BISHOP_PHASE_SCORE +
							   4*KNIGHT_PHASE_SCORE +
							   16*PAWN_PHASE_SCORE
)

var PhaseScores = [6]uint8{
	PAWN_PHASE_SCORE,
	KNIGHT_PHASE_SCORE,
	BISHOP_PHASE_SCORE,
	ROOK_PHASE_SCORE,
	QUEEN_PHASE_SCORE,
}

var MG_PIECE_VALUES = [6]int16{49, 201, 219, 316, 788}
var EG_PIECE_VALUES = [6]int16{130, 266, 283, 461, 790}

var MG_PSQT = [6][64]int16{
    {
          0,   0,   0,   0,   0,   0,   0,   0,
         32,  43,  50,  40,  38,  29,  21,  13,
         -1,   2,  18,  37,  36,  19,  11,  13,
        -25, -14, -17,  -8,   8,   0,  12,  -9,
        -35, -20, -19, -13, -11,  -8,  -6, -12,
        -42, -21, -29, -27, -19, -11,   2, -14,
        -41, -26, -28, -34, -28,  -7,  -1, -21,
          0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
        -20,   0,  -3,   0,   0,  -5,   0,  -1,
        -16,   0,  21,  14,  17,  26,  -1,  -8,
          1,  23,  33,  42,  52,  21,  23,   3,
          8,   0,   8,  25,   3,  27,   6,  10,
        -25,   7,   2, -11,   3,   1,  14,  -6,
        -27, -10, -11,   2,   6,  -9,   0, -15,
        -24, -33, -16, -17, -15,  -1, -40, -11,
        -20, -29, -33, -32, -18, -25, -30, -16,
    },
    {
         -8,   0,  -4,  -1,  -2,   0,  -2,  -3,
        -15,  -1,   8,   6,   1,   1,  -5,   0,
        -10,  21,   8,  27,  26,  27,  23,  23,
        -14,  -2,  11,  27,   5,  24,  -3,   2,
          0,  -3,  -6,   6,   5,   0,  -8,  -6,
        -10,   0,  -6,  -4,  -5, -10,  -4,   1,
         -8, -12,   3, -18, -16,  -8,   0, -19,
        -30,   3, -20, -36, -23, -22,  -6, -24,
    },
    {
          4,  13,  13,  20,  12,   4,   0,   9,
          6,   3,   9,  29,  11,  15,   2,   8,
          0,  20,   6,  29,  28,  17,  22,  -2,
        -11,   5, -18,  17,   5,  11,  -6,   5,
        -40, -24, -21, -22, -20, -24,  -8, -14,
        -37, -19, -36, -30, -22, -18, -15, -17,
        -52, -34, -26, -27, -29, -33, -24, -32,
        -38, -29, -29, -23, -21, -33, -29, -30,
    },
    {
        -10,   0,   1,   8,   2,   5,   2,   1,
         -3, -15, -11,   3,   2,  17,  -9,  22,
         -2,   7,  -4,  19,  32,  26,  31,  33,
         -4,  -4, -13,  -2,  10,   9,  11,  14,
         -9,  -9,  -9, -14, -10,  -6,   4,  -7,
         -5, -11,  -8, -14,  -5,  -8,   2,  -8,
        -31,  -3,   0,  -6,   0,  -5, -19,  -6,
         -7, -20, -16, -11,  -9, -26, -18, -10,
    },
    {
          0,   0,   0,   0,   0,   1,   0,   0,
          0,   3,   1,   1,   1,   3,   3,   0,
          2,   5,   6,   2,   5,   4,   5,   2,
          0,   3,   2,   4,   4,   6,   2,   1,
         -3,   1,  10,   4,   5,   3,   1,  -8,
         -6,  -4,   1,  -3, -15, -16,  -7, -18,
         11,   7, -11, -22, -29, -19,  12,  10,
          0,  32,  15, -41,   0, -36,  21,  25,
    },
}

var EG_PSQT = [6][64]int16{
    {
          0,   0,   0,   0,   0,   0,   0,   0,
         70,  71,  62,  49,  57,  45,  42,  56,
         45,  35,  43,  10,  20,  12,  29,  26,
          6,  -2, -10, -21, -28, -21,  -8, -10,
        -14, -12, -29, -37, -32, -31, -19, -26,
        -21, -18, -34, -22, -27, -29, -22, -32,
        -12,  -8, -21, -17, -11, -16, -19, -30,
          0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
        -15,   1,  -3,   0,  -1,  -6,  -2,  -3,
         -8,  -2,  11,  10,  11,   4,  -2,  -8,
          6,   8,  19,  20,  16,  11,  17, -11,
         -6,  21,  26,  32,  34,  25,  16,  -6,
         -9,   1,  29,  32,  24,  15,  17, -11,
        -28, -15,   4,  17,   9,   1,  -3, -21,
        -20,  -9, -16, -15,  -7, -19, -13, -26,
        -15, -43, -27,  -9, -20, -31, -29, -13,
    },
    {
         -3,   0,   0,  10,   0,   1,  -5,  -3,
        -12,   0,   1,   8,  -1,  -4,   2, -10,
          6,   4,   0,   9,  17,  24,  14,   7,
         -3,  10,  11,   7,  22,  10,  17,   1,
         -7,   9,  22,  14,   8,  12,  -5,  -6,
        -21,   5,  10,   9,  15,   0, -15, -13,
         -5, -16, -10,   0,   2, -18, -12, -19,
        -24,  -7, -30, -10, -13, -11,  -9, -14,
    },
    {
          9,  11,  14,  13,  22,  14,   3,   6,
         13,  18,  20,  19,  17,  16,   3,   4,
          6,   7,  17,  19,  17,   9,   6,   9,
          1,   2,  18,   9,   1,   3,  10,  -1,
         -1,  -5,   2,  11,  -6,  -4, -11,  -9,
        -19, -16,  -6,  -8, -10, -21, -14, -25,
        -13, -25, -10, -13, -19, -24, -22, -29,
        -15,  -9,   0,   1, -15, -14, -10, -30,
    },
    {
         -6,   0,   3,   6,   2,   4,   4,   4,
        -16,  -3,   3,   9,   2,  12,   2,   7,
         -6,   0,  -1,  13,  18,  18,  14,  15,
        -13,  -4,   0,  10,  23,  14,   6,   0,
         -8,   0,  -5,  23,   8,  13,   3,   0,
         -7, -22,   2,   0,  -3,   0, -11,  -4,
         -9, -13, -32, -16, -25, -20, -20,  -4,
        -13,  -9, -25, -17, -25, -24,  -9,  -4,
    },
    {
          0,   2,   3,   1,   3,   5,   0,   0,
         -3,  11,   6,   9,  11,  16,  14,   0,
          8,  19,  23,  10,  22,  24,  25,   8,
          1,  12,  16,  18,  24,  31,  17,   6,
         -6,   3,  16,  15,  19,  16,   9, -11,
         -9,  -6,   1,   6,   5,   0,  -6, -21,
         -7,  -7,   0,  -1,  -1,  -7, -18, -35,
        -30, -34, -27, -26, -52, -18, -35, -65,
    },
}

var FlipSq = [2][64]uint8{
	{
		0,  1,  2,  3,  4,  5,  6,  7,
		8,  9,  10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8,  9,  10, 11, 12, 13, 14, 15,
		0,  1,  2,  3,  4,  5,  6,  7,
	},
}

func Evaluate(pos *Position) int16 {
	mgScore := pos.MGScores[pos.SideToMove] - pos.MGScores[pos.SideToMove^1]
	egScore := pos.EGScores[pos.SideToMove] - pos.EGScores[pos.SideToMove^1]

	mgTerm := int32(pos.Phase) * int32(mgScore)
	egTerm := int32(egScore) * int32(TOTAL_PHASE-pos.Phase)
	return int16((mgTerm + egTerm) / int32(TOTAL_PHASE))
}
