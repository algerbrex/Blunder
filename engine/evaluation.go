package engine

const (
	QUEEN_PHASE_SCORE  uint8 = 6
	ROOK_PHASE_SCORE   uint8 = 4
	BISHOP_PHASE_SCORE uint8 = 2
	KNIGHT_PHASE_SCORE uint8 = 2
	PAWN_PHASE_SCORE   uint8 = 0
	TOTAL_PHASE        uint8 = 2*QUEEN_PHASE_SCORE +
							   4*ROOK_PHASE_SCORE +
							   4*BISHOP_PHASE_SCORE +
							   4*KNIGHT_PHASE_SCORE +
							   16*PAWN_PHASE_SCORE
)

var PhaseScores = [6]uint8{
	PAWN_PHASE_SCORE,
	KNIGHT_PHASE_SCORE,
	BISHOP_PHASE_SCORE,
	ROOK_PHASE_SCORE,
	QUEEN_PHASE_SCORE,
}

var MG_PIECE_VALUES = [6]int16{49, 192, 214, 311, 787}
var EG_PIECE_VALUES = [6]int16{139, 277, 294, 484, 807}

var MG_PSQT = [6][64]int16{
    {
          0,   0,   0,   0,   0,   0,   0,   0,
         30,  41,  55,  56,  44,  25,  15,  15,
         -8,   1,  24,  47,  48,  31,  36,  18,
        -26, -15, -16,  -5,   7,   6,  13,  -8,
        -38, -23, -23, -16, -11, -10,  -2, -16,
        -44, -26, -33, -34, -18, -11,   3, -19,
        -43, -30, -34, -43, -26, -10,   0, -28,
          0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
        -38,   0,   5,   5,   0,  -5,  -3,  -3,
         -6,  13,  17,  10,  27,  25,   1,  10,
         -1,  17,  36,  45,  57,  33,  37,   0,
          0,  -1,   3,  24,   7,  31,   3,  19,
        -22,   6,  -1,  -7,   1,   2,  17, -10,
        -29, -16, -12,   2,   0,  -7,   3, -15,
        -35, -30, -16, -17, -14, -13, -33, -25,
        -32, -30, -42, -40, -27, -28, -25, -34,
    },
    {
         -8,  -6,   0,  -8,  -7,  -5,  -4,  -3,
        -10,  -7,  -2,   4,   2,  10, -17,  -8,
         -6,  21,   6,  29,  26,  20,  33,  15,
         -7, -10,   9,  26,   5,  26,  -4,  -5,
         -5,  -2,  -3,   2,   3,  -3,   0,   0,
        -12,   2,  -3,  -5,  -6,  -9,  -2,  -4,
         -5, -10,   2, -18, -15,  -7,  -4, -17,
        -22,  -2, -21, -32, -28, -24, -16, -14,
    },
    {
         15,  18,  15,  22,  10,   6,   3,  11,
         11,  -1,  15,  28,  19,  14,   6,  16,
         -2,  15,   0,  25,  34,  31,  21,   5,
         -5,  -7, -15,  18,   1,  -7,  -1,   5,
        -32, -28, -30, -15, -29, -26,  -4, -33,
        -48, -21, -29, -25, -33, -28, -20, -17,
        -47, -37, -28, -26, -31, -37, -24, -41,
        -42, -35, -29, -25, -25, -39, -34, -35,
    },
    {
        -10,  -1,   5,   6,   1,   4,   6,  -4,
          0, -14,   2,   1,  10,  18,  -4,   4,
         -9,   1,   3,  18,  31,  29,  31,  27,
         -9,  -1,   3,  -1,   4,  10,   6,   5,
        -14,  -9, -11, -10, -12,  -4,   0,   3,
        -10, -11,  -7, -14,  -4,  -5,   3,  -2,
        -28, -15,  -6,  -4,  -3,   3,  -9,  -2,
         -9, -21, -19, -12,  -7, -32,  -4, -30,
    },
    {
          0,   1,   0,   0,   1,   0,   0,   0,
          0,   2,   2,   2,   1,   2,   4,   0,
          0,   8,   7,   4,   2,   6,   6,   0,
          1,   4,   4,   5,   5,   4,   6,  -2,
         -5,   2,   2,   6,   0,   2,  -2,  -8,
         -9,   1,  13, -11, -19,  -9, -11, -15,
          3,   2, -13, -25, -26, -22,  10,   2,
          3,  42,  13, -53,  -1, -33,  27,  29,
    },
}

var EG_PSQT = [6][64]int16{
    {
          0,   0,   0,   0,   0,   0,   0,   0,
         83,  78,  59,  64,  68,  43,  51,  64,
         44,  35,  23,  10,  20,  19,  50,  21,
          0,  -2, -13, -26, -24, -30,  -9,  -9,
        -16, -13, -33, -40, -34, -32, -22, -30,
        -26, -14, -34, -24, -28, -32, -25, -35,
        -17,  -9, -19,  -9, -13, -21, -20, -33,
          0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
        -22,  -1,   6,   2,   0,  -4,  -6,  -3,
         -9,   2,   7,  12,  16,   2,  -3,   0,
          4,   4,  27,  24,  26,  10,  17,   0,
         12,  27,  31,  36,  37,  18,  27,  -5,
        -14,   2,  31,  34,  36,  30,   3, -12,
        -32,  -1,  12,  22,  17,   0, -22, -17,
        -32, -20, -20, -12, -11,  -9, -18, -13,
        -19, -67, -28, -18, -37, -34, -45, -18,
    },
    {
         -8,  -5,   7,   6,   0,  -2,  -9,   0,
        -11,   1,   6,   9,  -2,   1,   0, -14,
          6,  12,   7,   0,  11,  17,  17,  17,
        -11,  17,   7,  14,  28,   8,   9,   5,
         -6,  12,  25,  13,  23,  19,  -2, -26,
        -17,   8,   9,  18,  17,   1,  -6,  -9,
        -17, -24,  -9,   2,   5, -17, -10, -18,
        -15, -25, -37,  -9, -19, -12,  -8, -14,
    },
    {
          7,  15,  22,  15,  21,   9,  10,  12,
          5,  20,  19,  25,  30,  10,  15,  15,
         15,  14,  19,  15,  13,  14,  11,   2,
          0,   7,  22,  10,   5,   5,   3,   1,
         -5,  -5,   8,  -1,  -1,   0,  -9, -13,
        -13, -16, -11, -17,  -9, -22,  -7, -26,
        -21, -20, -13, -16, -28, -26, -33, -13,
        -17, -10,  -3,  -1, -14,  -9, -13, -31,
    },
    {
          0,   6,   4,   3,   3,   4,   5,   1,
        -13,  10,  11,  11,   5,   8,   5,  -3,
         -6,   7,   9,  11,  15,  22,  14,   4,
         -6,  -4,  10,  21,  18,  17,  13,  -2,
        -10,   0,   4,  25,   0,  -2,   4,  -1,
        -12, -10,   0,   3,  -8,   2, -12,   0,
        -10, -12, -22, -20, -31, -35, -12,  -6,
        -10,  -6, -32, -25, -29, -23, -11,  -8,
    },
    {
         -1,   4,  -2,   2,   8,   2,   2,   0,
         -1,  14,  10,   8,  12,  14,  21,  -3,
          3,  33,  25,  18,  22,  29,  26,   3,
          5,  19,  21,  25,  39,  25,  26,  -1,
         -8,  10,  19,  18,  18,  11,   3, -20,
         -8, -11,   1,   4,   8,   0, -10, -24,
        -12, -19,  -4,  -5,  -1,  -7, -19, -25,
        -20, -41, -24, -28, -58, -20, -37, -70,
    },
}

var FlipSq = [2][64]uint8{
	{
		0,  1,  2,  3,  4,  5,  6,  7,
		8,  9,  10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
		32, 33, 34, 35, 36, 37, 38, 39,
		40, 41, 42, 43, 44, 45, 46, 47,
		48, 49, 50, 51, 52, 53, 54, 55,
		56, 57, 58, 59, 60, 61, 62, 63,
	},

	{
		56, 57, 58, 59, 60, 61, 62, 63,
		48, 49, 50, 51, 52, 53, 54, 55,
		40, 41, 42, 43, 44, 45, 46, 47,
		32, 33, 34, 35, 36, 37, 38, 39,
		24, 25, 26, 27, 28, 29, 30, 31,
		16, 17, 18, 19, 20, 21, 22, 23,
		8,  9,  10, 11, 12, 13, 14, 15,
		0,  1,  2,  3,  4,  5,  6,  7,
	},
}

func Evaluate(pos *Position) int16 {
	mgScore := pos.MGScores[pos.SideToMove] - pos.MGScores[pos.SideToMove^1]
	egScore := pos.EGScores[pos.SideToMove] - pos.EGScores[pos.SideToMove^1]

	mgTerm := int32(pos.Phase) * int32(mgScore)
	egTerm := int32(egScore) * int32(TOTAL_PHASE-pos.Phase)
	return int16((mgTerm + egTerm) / int32(TOTAL_PHASE))
}
